name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, master ]
  pull_request:
    branches: [ main, develop, master ]

env:
  MIX_ENV: test
  ELIXIR_VERSION: 1.16.3
  OTP_VERSION: 26.2.5
  NODE_VERSION: 18
  HEX_HTTP_TIMEOUT: 300

jobs:
  # Stage 1: Plan (PR validation)
  validate-pr:
    name: Validate PR Requirements
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Check PR Description
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const hasAcceptanceCriteria = pr.body.includes('## Acceptance Criteria') || pr.body.includes('acceptance criteria');
            const hasTestPlan = pr.body.includes('## Test Plan') || pr.body.includes('test plan');
            
            if (!hasAcceptanceCriteria || !hasTestPlan) {
              console.log('PR must include Acceptance Criteria and Test Plan sections');
              // Warning instead of failing for now
            }

  # Stage 2: Code Quality & Security
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}
        
    - name: Cache deps
      uses: actions/cache@v3
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-
        
    - name: Cache _build
      uses: actions/cache@v3
      with:
        path: _build
        key: ${{ runner.os }}-build-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ matrix.otp }}-${{ matrix.elixir }}-
          
    - name: Install dependencies
      run: |
        mix local.hex --force
        mix local.rebar --force
        mix deps.get || (sleep 30 && mix deps.get) || (sleep 60 && mix deps.get)
      
    - name: Check formatting
      run: mix format --check-formatted
      
    - name: Run Credo
      run: mix credo --mute-exit-status
      
    - name: Check unused dependencies
      run: mix deps.unlock --check-unused
      
    - name: Compile with warnings as errors
      run: mix compile --warnings-as-errors

  # Stage 2: Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}
        
    - name: Cache deps
      uses: actions/cache@v3
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        
    - name: Install dependencies
      run: |
        mix local.hex --force
        mix local.rebar --force
        mix deps.get || (sleep 30 && mix deps.get) || (sleep 60 && mix deps.get)
      
    - name: Setup database
      run: |
        mix ecto.create
        mix ecto.migrate
      env:
        MIX_ENV: test
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/autonomous_opponent_test
        AUTONOMOUS_OPPONENT_V2_DATABASE_URL: postgres://postgres:postgres@localhost:5432/autonomous_opponent_test
        AUTONOMOUS_OPPONENT_CORE_DATABASE_URL: postgres://postgres:postgres@localhost:5432/autonomous_opponent_core_test
      
    - name: Run tests with coverage
      run: mix test --cover
      env:
        MIX_ENV: test
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/autonomous_opponent_test
        AUTONOMOUS_OPPONENT_V2_DATABASE_URL: postgres://postgres:postgres@localhost:5432/autonomous_opponent_test
        AUTONOMOUS_OPPONENT_CORE_DATABASE_URL: postgres://postgres:postgres@localhost:5432/autonomous_opponent_core_test
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3

  # Security scanning
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || (github.event.before != '0000000000000000000000000000000000000000' && github.event.before || github.sha) }}
        head: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
        extra_args: --only-verified
      
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}
        
    - name: Cache deps
      uses: actions/cache@v3
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        
    - name: Install dependencies
      run: |
        mix local.hex --force
        mix local.rebar --force
        mix deps.get || (sleep 30 && mix deps.get) || (sleep 60 && mix deps.get)
      
    - name: Security audit
      run: mix deps.audit

  # Stage 3: Build & Package
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Generate build metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=semver,pattern={{version}}
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/image.tar
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        input: /tmp/image.tar
        format: 'sarif'
        output: 'trivy-results.sarif'
      
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
      
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: /tmp/image.tar

  # Stage 5: Deploy (for protected branches)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.cyberneticai.com
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add actual deployment steps here