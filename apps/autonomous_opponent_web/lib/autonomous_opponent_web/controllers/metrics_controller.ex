defmodule AutonomousOpponentV2Web.MetricsController do
  @moduledoc """
  Controller for exposing metrics in Prometheus format.
  This endpoint can be scraped by Prometheus/Grafana for monitoring.
  
  Enhanced with VSM Multi-Mind recommendations:
  - Metric type annotations for Prometheus compliance
  - CORS headers for cross-origin scraping
  - Cardinality tracking to prevent explosion
  - Meta-metrics about the metrics system itself
  """
  use AutonomousOpponentV2Web, :controller

  # Maximum allowed metric cardinality to prevent memory explosion
  @max_metric_cardinality 10_000

  def index(conn, _params) do
    prometheus_text =
      case Process.whereis(AutonomousOpponentV2Core.Core.Metrics) do
        nil ->
          # Return empty metrics if metrics system not running
          "# No metrics available - metrics system not running\n"
        _pid ->
          try do
            # Get raw metrics
            metrics_text = AutonomousOpponentV2Core.Core.Metrics.prometheus_format(AutonomousOpponentV2Core.Core.Metrics)
            
            # Add metric type annotations and meta-metrics
            enhance_prometheus_output(metrics_text)
          rescue
            _ -> "# Error retrieving metrics\n"
          end
      end

    conn
    |> put_resp_header("access-control-allow-origin", "*")  # CORS for cross-origin Prometheus
    |> put_resp_content_type("text/plain; version=0.0.4")
    |> send_resp(200, prometheus_text)
  end

  # Enhance Prometheus output with type annotations and meta-metrics
  defp enhance_prometheus_output(metrics_text) do
    # Add header with metadata
    header = """
    # Autonomous Opponent VSM Metrics
    # Generated at: #{DateTime.utc_now() |> DateTime.to_iso8601()}
    # Cardinality: #{count_metric_cardinality(metrics_text)} metrics
    
    """
    
    # Add type annotations for known metrics
    type_annotations = """
    # HELP vsm_variety_absorbed The amount of variety absorbed by each subsystem
    # TYPE vsm_variety_absorbed counter
    # HELP vsm_variety_generated The amount of variety generated by each subsystem  
    # TYPE vsm_variety_generated counter
    # HELP vsm_algedonic_pain Pain signals intensity (0-1)
    # TYPE vsm_algedonic_pain gauge
    # HELP vsm_algedonic_pleasure Pleasure signals intensity (0-1)
    # TYPE vsm_algedonic_pleasure gauge
    # HELP vsm_subsystem_health Health percentage of each VSM subsystem
    # TYPE vsm_subsystem_health gauge
    # HELP vsm_cybernetic_loop_latency Latency of cybernetic feedback loops in milliseconds
    # TYPE vsm_cybernetic_loop_latency histogram
    # HELP metrics_cardinality_total Current number of unique metric series
    # TYPE metrics_cardinality_total gauge
    
    """
    
    # Add meta-metrics about the metrics system
    meta_metrics = generate_meta_metrics(metrics_text)
    
    # Combine all parts
    header <> type_annotations <> metrics_text <> "\n" <> meta_metrics
  end

  # Count unique metric series for cardinality tracking
  defp count_metric_cardinality(metrics_text) do
    metrics_text
    |> String.split("\n")
    |> Enum.filter(&String.contains?(&1, "{"))
    |> Enum.uniq()
    |> Enum.count()
  end

  # Generate meta-metrics about the metrics system itself
  defp generate_meta_metrics(metrics_text) do
    cardinality = count_metric_cardinality(metrics_text)
    size_bytes = byte_size(metrics_text)
    
    """
    # Meta-metrics for observability of the metrics system
    metrics_cardinality_total #{cardinality}
    metrics_response_size_bytes #{size_bytes}
    metrics_endpoint_up 1
    """
  end
end